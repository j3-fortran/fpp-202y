To: J3                                                         J3/24-148
From: JoR
Subject: Formal specifications for the Fortran preprocessor (FPP)
Date: 2025-March-09
References: 25-114r2 Fortran preprocessor requirements
            25-007 Fortran 2023 Interpretation Document
            24-108 Preprocessor directives seen in existing Fortran
                   programs.txt
            24-109 On Fortran awareness in a Fortran preprocessor.txt
            ISO/IEC 9899:2023 Programming languages -- C
                   (working draft N3096)


1. Introduction
===============

At its meeting Feb 19, 2025, J3 decided to approve requirements for
a cpp-like preprocessor for Fortran 202Y (paper 25-114r2).

This is the formal specifications document, revised according to the
discussion arising from 25-114r2.

Terminology: For the purpose of this specification, the 'preprocessor'
encompasses any stages of preprocessing of the input text. For didactic
purposes, that might include additional phases of "preprocessing" that
help define the expected priorities of preprocessing behaviors. (In past
discussions, these have included line continuation processing, comment
handling, and tokenization for the preprocessor.)


2. Formal specifications
========================

2.1 Lexical specifications
--------------------------

2.1.1 Lines
-----------

li00. The Fortran preprocessor recognizes three distinct types of lines:
      preprocessing directives (and continuation lines thereof),
      Fortran comment lines, and Fortran source fragments.

li10. A line that has a '#'
      character as the first non-blank character of the line is a
      directive line (as required by C 2023 6.10.1 paragraph 2),
      except when otherwise specified by the next two rules.

li21. In fixed-form input files, a '#' in column 6 of a non-comment
      line does not introduce a directive line.

li22. A preprocessor directive can be continued with a backslash '\'
      immediately followed by a new-line. The backslash and new-line are
      deleted, the content of the subsequent line are textually appended
      to the current directive, and the subsequent line is deleted.
      This process repeats until the current directive does not end
      with a backslash '\' immediately followed by a new-line.

li23. Preprocessor directive continuation processing described by the prior rule is
      effectively performed before any other processing of the text in affected lines.

li23. The maximum length of a preprocessor directive (including
      continuation text) is one million characters.

li24. A non-empty source file shall not end with a '\' followed
      immediately by a new-line as required in C 2023 5.1.1.2 bullet 2.

li30. Fortran source fragments are those lines that are neither
      preprocessor directive lines (or continuations thereof)
      nor Fortran comment lines.



li31. Text on fixed-form Fortran source fragments is ignored beyond
      column 72.

li32. Fortran source fragments may be continued with a continuation
      ('&' at the end of a free-form line as specified in Fortran 2023
      6.3.2.4, or with a non-blank, non-zero character in column 6
      of a fixed-form line as specified in Fortran 2023 6.3.3.3).

      Example 1 (free-form):
          call subroutine_foo(1, 2, &
      #ifdef USE_3
                                    3, &
      #else
                                    666, &
      #endif
                                    .true.)

      Example 2 (fixed-form):
            call subroutine_foo(1, 2,
      #ifdef USE_3
           1                       3,
      #else
           1                       666,
      #endif
           2                       .true.)



2.1.2 Case sensitivity of identifiers
-------------------------------------

cs01. Directive names are case-sensitive and recognized in lower-case.

cs02. Macro names and function-like macro argument names are
      case-sensitive.

cs03. Preprocessor-defined macro names are case-sensitive.



2.1.3 Significance of whitespace
--------------------------------

ws01. The whitespace characters blank and horizontal tab character may appear
      on directive lines.

ws03. Whitespace characters are significant in determining token
      boundaries in preprocessor directive lines.

ws02. Whitespace characters are significant in determining token
      boundaries for the purposes of recognizing macro names,
      in both fixed-form and free-form Fortran source fragments.

ws03. Whitespace characters are significant in determining token
      boundaries for the purposes of recognizing macro names,
      in both fixed-form and free-form Fortran comment lines.

ws04. In fixed-form input, macro names are not recognized as such when
      spaces are inserted into their invocations.


2.2 Comments
------------

co01. Directive lines may contain C-style '/*' ... '*/' comments.

co02. Directive lines shall not contain C style '//' comments.

co02. '/*' ... '*/' comments on directive lines shall extend past a
      new-line only if the line ends in '\' new-line, indicating a
      continuation line. (Maybe controversial)

co03. '/*' ... '*/' comments on directive lines are replaced by a
      single space, as specified in C 2023 5.1.1.2 bullet 3.

co04. In a directive line, the '!' character is not interpreted as introducing
      a Fortran-style comment, and neither the `!` character nor any subsequent
      text are removed by the preprocessor.

co05. Directive lines (by definition) cannot contain Fortran
      fixed-form 'C' or '*' style comments.


2.4 Token lexicon
-----------------
[gak: List the character sequences that are recognized as separate tokens
on directives and in Fortran source fragments. This should include
Fortran identifiers, Fortran numeric constants, Fortran character
constants, the Fortran operators, and the C operators used to construct
constant-integer-expression.]



3 #-Directives
==============

di01. The '#define' macro directive

di02. The '#define' function-like macro directive

di03. The '#undef' directive

di04. The '#include' directive

di03. The '#if', '#ifdef', '#ifndef', '#elif', '#elifdef',
      '#elifndef', '#else', '#endif' directives

di04. The '#error' and '#warning' directives

di05. The '#line' directive

di06. The '#pragma' directive

di07. The non-directive directive




3.1 The '#define' macro directive
---------------------------------


3.2 The '#define' function-like macro directive
-----------------------------------------------


3.3 The '#undef' directive
--------------------------



3.4 The '#include' directive
----------------------------


3.3 The '#if', '#ifdef', '#ifndef', '#elif', '#elifdef',
      '#elifndef', '#else', '#endif' directives
---------------------------------------------------------


3.4 The '#error' and '#warning' directives
------------------------------------------


3.5 The '#line' directive
-------------------------


3.6 The '#pragma' directive
---------------------------


3.7 The non-directive directive
-------------------------------




4 Macro recognition and expansion
---------------------------------




4.9 The '#' and '##' operators
------------------------------
4.2 The identifiers __VA_ARGS__ and __VA_OPT__
----------------------------------------------





5 Expressions allowed in #if and #elif directives
=================================================



6 Expression evaluation in #if and #elif directives
===================================================



7 Predefined macros
===================


7.1 __LINE__
------------


7.2 __FILE__
------------


7.3 __DATE__
------------


7.4 __TIME__
------------


7.5 __STDF__
------------
__STDF__ is an analog to __STDC__ in C and __cplusplus in C++. Its
primary role is to provide preprocessor-visible and vendor-independent
identification of the underlying target language (i.e., "the processor
is Fortran"), which enables one to write multi-language header files
with conditional compilation based on language.

st01. The predefined value of __STDF__ is 1.



8 Output of the preprocessor
============================
[gak: What we want to say about the specifics of the output, presumably
as a token stream, not necessarily as a character stream.]
